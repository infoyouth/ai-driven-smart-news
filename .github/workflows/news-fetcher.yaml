name: AI Driven News 🚀

on:
  workflow_dispatch: # Allow manual triggering of the workflow
  #schedule: # Run the workflow on a schedule
  #  - cron: "0 3 * * *" # Runs daily at 3 AM UTC

  #pull_request: # Trigger on pull request events
  #  branches:
  #    - main

jobs:
  run_main_script:
    runs-on: ubuntu-24.04
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # Set the API key from GitHub Secrets
      NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }} # Set the NewsAPI key from GitHub Secrets
    steps:
      - name: 🚗 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set Up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: 🗄️ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Poetry
        run: |
          echo "🔄 Installing Poetry..."
          python -m pip install --upgrade pip
          pip install poetry

      - name: 📦 Install Dependencies and Project
        run: |
          echo "🔄 Installing dependencies and project..."
          poetry install

      - name: 🧪 Debug Python Environment
        run: |
          echo "Python executable: $(which python)"
          echo "Python version: $(python --version)"
          echo "Installed packages:"
          python -m pip list

      - name: 🧪 Set PYTHONPATH
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          echo "PYTHONPATH set to: $PYTHONPATH"

      - name: 📝 Run Main Script
        run: |
          set -e
          echo "🚀 Running main.py within Poetry environment..."
          poetry run python main.py
          #echo "💰 [Walmart & Amazon Exploring Stablecoins](https://www.wsj.com/finance/banking/walmart-amazon-stablecoin-07de2fdd)" > output.txt

      - name: ✅ Validate Output Files
        id: validate-output
        run: |
          # Ensure at least one filtered file exists
          set -e
          SH_FILES=$(ls filtered_*.json 2>/dev/null || true)
          if [ -z "$SH_FILES" ]; then
            echo "no_filtered_files=true" >> $GITHUB_ENV
            echo "No filtered files found. Exiting with error." >&2
            exit 1
          else
            echo "no_filtered_files=false" >> $GITHUB_ENV
          fi

      - name: 🔁 Post filtered files to Discord (robust + verbose debug)
        if: ${{ env.no_filtered_files == 'false' }}
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          echo "Running scripts/post_filtered_to_discord.py"
          python3 scripts/post_filtered_to_discord.py
      - name: 🌍 Beautify Logs
        run: echo "🎉 Workflow completed successfully! 🎉"
