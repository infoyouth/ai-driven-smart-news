name: AI Driven News üöÄ

on:
  workflow_dispatch: # Allow manual triggering of the workflow
  schedule: # Run the workflow on a schedule
    - cron: "0 3 * * *" # Runs daily at 3 AM UTC

  #pull_request: # Trigger on pull request events
  #  branches:
  #    - main

jobs:
  run_main_script:
    runs-on: ubuntu-24.04
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }} # Set the API key from GitHub Secrets
      NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }} # Set the NewsAPI key from GitHub Secrets
    steps:
      - name: üöó Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set Up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: üóÑÔ∏è Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: üì¶ Install Poetry
        run: |
          echo "üîÑ Installing Poetry..."
          python -m pip install --upgrade pip
          pip install poetry

      - name: üì¶ Install Dependencies and Project
        run: |
          echo "üîÑ Installing dependencies and project..."
          poetry install

      - name: üß™ Debug Python Environment
        run: |
          echo "Python executable: $(which python)"
          echo "Python version: $(python --version)"
          echo "Installed packages:"
          python -m pip list

      - name: üß™ Set PYTHONPATH
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          echo "PYTHONPATH set to: $PYTHONPATH"

      - name: üìù Run Main Script
        run: |
          set -e
          echo "üöÄ Running main.py within Poetry environment..."
          poetry run python main.py
          #echo "üí∞ [Walmart & Amazon Exploring Stablecoins](https://www.wsj.com/finance/banking/walmart-amazon-stablecoin-07de2fdd)" > output.txt

      - name: ‚úÖ Validate Output Files
        id: validate-output
        run: |
          # Ensure at least one filtered file exists
          set -e
          SH_FILES=$(ls filtered_*.json 2>/dev/null || true)
          if [ -z "$SH_FILES" ]; then
            echo "no_filtered_files=true" >> $GITHUB_ENV
            echo "No filtered files found. Exiting with error." >&2
            exit 1
          else
            echo "no_filtered_files=false" >> $GITHUB_ENV
          fi

      - name: üîÅ Post filtered files to Discord
        if: ${{ env.no_filtered_files == 'false' }}
        shell: bash
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          for f in filtered_*.json; do
            echo "Posting $f to Discord"
            payload_json=$(python3 - <<PY
import json,sys,os
f = sys.argv[1]
with open(f, 'r', encoding='utf-8') as fh:
    s = fh.read()
payload = {
    "username": "Youth Innovations",
    "content": f"AI-Driven News: {os.path.basename(f)}\n```json\n{s}\n```"
}
print(json.dumps(payload))
PY
"$f")

            curl -s -H "Content-Type: application/json" -X POST "$DISCORD_WEBHOOK_URL" -d "$payload_json"
            echo "Posted $f"
          done
      - name: üåç Beautify Logs
        run: echo "üéâ Workflow completed successfully! üéâ"
